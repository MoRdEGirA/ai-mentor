from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from handlers.assignments_fsm import show_assignments
from handlers.achievements import show_achievements
from handlers.motivation import show_motivation

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìö –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è", callback_data="menu::assignments")],
        [InlineKeyboardButton("üéØ –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data="menu::change_topic")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu::profile")],
        [InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="menu::achievements")],
        [InlineKeyboardButton("üí¨ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="menu::motivation")]
    ])

    if update.message:
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    else:
        await update.callback_query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

async def handle_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data.split("::")[1]

    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu::back")]
    ])

    if action == "assignments":
        await show_assignments(update, context)
    elif action == "change_topic":
        await query.edit_message_text("üéØ –°–∫–æ—Ä–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–º–µ–Ω–∏—Ç—å —Ç–µ–º—É.", reply_markup=back_button)
    elif action == "profile":
        await query.edit_message_text("üë§ –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.", reply_markup=back_button)
    elif action == "rewards":
        await query.edit_message_text("üèÜ –ù–∞–≥—Ä–∞–¥—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –∑–¥–µ—Å—å.", reply_markup=back_button)
    elif action == "back":
        await show_main_menu(update, context)
    elif action == "achievements":
        await show_achievements(update, context)
    elif action == "motivation":
        await show_motivation(update, context)



