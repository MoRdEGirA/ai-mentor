from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from handlers.test import questions, question_states
from state import TEST_DONE
import httpx
from config import API_BASE_URL

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = context.user_data.get("q_index", 0)
    question = questions[index]
    keyboard = InlineKeyboardMarkup.from_column([
        InlineKeyboardButton(text=opt, callback_data=f"q{index}::{opt}")
        for opt in question["options"]
    ])

    if "last_msg_id" in context.user_data:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data["last_msg_id"])
        except:
            pass

    msg = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=question["text"],
        reply_markup=keyboard
    )
    context.user_data["last_msg_id"] = msg.message_id


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data  # —Ñ–æ—Ä–º–∞—Ç: q0::–°–æ–ª–Ω—Ü–µ

    try:
        q_index, answer = data.split("::")
        q_index = int(q_index[1:])
        effects = questions[q_index]["options"][answer]
        profile = context.user_data.get("profile", {"—Å—Ç—Ä–µ—Å—Å": 0, "—Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å": 0, "–ø–æ–∑–∏—Ç–∏–≤": 0, "—ç–Ω–µ—Ä–≥–∏—è": 0})

        for key in effects:
            profile[key] += effects[key]

        context.user_data["profile"] = profile
        context.user_data["q_index"] = q_index + 1

        await query.edit_message_reply_markup(None)

        if q_index + 1 < len(questions):
            await ask_question(update, context)
            return question_states[q_index + 1]
        else:
            telegram_id = str(update.effective_user.id)
            async with httpx.AsyncClient() as client:
                r = await client.get(f"{API_BASE_URL}/students/{telegram_id}")
                if r.status_code != 200:
                    raise Exception("Student not found")
                student_id = r.json()["id"]
                await client.post(f"{API_BASE_URL}/mood_logs/", json={
                    "student_id": student_id,
                    "score_stress": profile["—Å—Ç—Ä–µ—Å—Å"],
                    "score_anxiety": profile["—Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å"],
                    "score_positive": profile["–ø–æ–∑–∏—Ç–∏–≤"],
                    "score_energy": profile["—ç–Ω–µ—Ä–≥–∏—è"]
                })

            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üß± –í—Ä–µ–º–µ–Ω–∞", callback_data="topic::tenses"),
                    InlineKeyboardButton("üß† –°–ª–æ–≤–∞", callback_data="topic::vocab")
                ],
                [
                    InlineKeyboardButton("üß© –ò–¥–∏–æ–º—ã", callback_data="topic::idioms"),
                    InlineKeyboardButton("üéß –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="topic::listening")
                ],
                [
                    InlineKeyboardButton("üó£Ô∏è –†–∞–∑–≥–æ–≤–æ—Ä", callback_data="topic::conversation"),
                    InlineKeyboardButton("üéØ –ö–≤–∏–∑—ã", callback_data="topic::quiz")
                ]
            ])

            await query.edit_message_text(
                "–°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–µ–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏ üß†\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å –ø—Ä–æ–∫–∞—á–∞—Ç—å—Å—è:\n\n"
                "–ï–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤ –º–µ–Ω—é",
                reply_markup=keyboard
            )
            return TEST_DONE

    except Exception as e:
        await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{e}")
        return TEST_DONE